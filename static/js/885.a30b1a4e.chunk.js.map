{"version":3,"file":"static/js/885.a30b1a4e.chunk.js","mappings":"iRACA,GAAgB,KAAO,yB,kBCqBvB,EAlBiB,SAAC,GAAa,IACrBA,EADoB,EAAXC,MACQC,KAAI,YAA0C,IAAxCC,EAAuC,EAAvCA,GAAIC,EAAmC,EAAnCA,KAAMC,EAA6B,EAA7BA,UAAWC,EAAkB,EAAlBA,aACxCC,GAA2B,OAAZD,QAAY,IAAZA,OAAA,EAAAA,EAAcE,QAAS,EAAvB,yCAA6DF,GAAiBG,EACnG,OACI,gBAAaC,UAAWC,EAAAA,KAAxB,WACI,gBAAKC,IAAKL,EAAcM,MAAM,MAAMC,IAAKV,KACzC,uBAAIA,KACJ,uCAAeC,OAHVF,EAMhB,IACD,OACI,eAAIO,UAAWC,EAAAA,KAAf,SACKX,GAGZ,ECuCD,EAnDsB,WAClB,OAA0Be,EAAAA,EAAAA,UAAS,CAC/Bd,MAAO,GACPe,SAAS,EACTC,MAAO,OAHX,eAAOC,EAAP,KAAcC,EAAd,KAMOC,GAAWC,EAAAA,EAAAA,MAAXD,SAEPE,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAS,mCAAG,2FACdJ,GAAS,SAAAK,GAAS,yBACXA,GADW,IAEdR,SAAS,EACTC,MAAO,MAHO,IADJ,mBAOSQ,EAAAA,EAAAA,IAAQL,GAPjB,OAOJM,EAPI,OAQVP,GAAS,SAAAK,GACL,OAAO,kBACAA,GADP,IAEIvB,MAAM,GAAD,eAAMuB,EAAUvB,QAAhB,OAA0ByB,KAEtC,IAbS,gDAeVP,GAAS,SAAAK,GAAS,yBACXA,GADW,IAEdP,MAAK,MAFS,IAfR,yBAoBVE,GAAS,SAAAK,GACL,OAAO,kBACAA,GADP,IAEIR,SAAS,GAChB,IAxBS,4EAAH,qDA2BfO,GACH,GAAE,CAACH,EAASD,IAEb,IAAOlB,EAAyBiB,EAAzBjB,MAAOe,EAAkBE,EAAlBF,QAASC,EAASC,EAATD,MAEvB,OACI,2BACKD,IAAW,SAACW,EAAA,EAAD,IACXV,IAAS,iCACThB,EAAMO,OAAS,IAAK,SAAC,EAAD,CAAUP,MAAOA,MAGjD,C,sLCvDK2B,E,OAAWC,EAAAA,OAAa,CAC1BC,QAAS,+BACTC,OAAQ,CACJC,QAAS,sCAIJC,EAAgB,mCAAG,WAAMC,GAAN,8FAAcC,EAAd,+BAAqB,EAArB,SACPP,EAASQ,IAAT,0BAAgCF,GAAU,CAC3DH,OAAQ,CACJI,KAAAA,KAHoB,uBACrBE,EADqB,EACrBA,KADqB,kBAOrBA,EAAKC,SAPgB,2CAAH,sDAUhBC,EAAY,mCAAG,WAAMC,GAAN,yFACHZ,EAASQ,IAAT,iBAAuBI,GAAY,CAAC,GADjC,uBACjBH,EADiB,EACjBA,KADiB,kBAEjBA,GAFiB,2CAAH,sDAKZI,EAAU,mCAAG,WAAMD,GAAN,yFACDZ,EAASQ,IAAT,iBAAuBI,EAAvB,YAA2C,CAAC,GAD3C,uBACfH,EADe,EACfA,KADe,kBAEfA,EAAKC,SAFU,2CAAH,sDAKVb,EAAO,mCAAG,WAAMe,GAAN,yFACEZ,EAASQ,IAAT,iBAAuBI,EAAvB,YAA2C,CAAC,GAD9C,uBACZH,EADY,EACZA,KADY,kBAEZA,EAAKX,MAFO,2CAAH,sDAKPgB,EAAY,mCAAG,WAAMC,GAAN,8FAAaR,EAAb,+BAAoB,EAApB,SACHP,EAASQ,IAAT,gBAA8B,CAC/CL,OAAQ,CACJY,MAAAA,EACAR,KAAAA,KAJgB,uBACjBE,EADiB,EACjBA,KADiB,kBAQjBA,EAAKC,SARY,2CAAH,qD","sources":["webpack://react-homework-template/./src/modules/CastList/cast-list.module.scss?5582","modules/CastList/CastList.jsx","pages/MovieCastPage/MovieCastPage.jsx","shared/api/api.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"list\":\"cast-list_list__X0608\"};","import styles from './cast-list.module.scss';\n\nimport defaultImage from '../../shared/images/default-avatar.png';\n\nconst CastList = ({items}) => {\n    const elements = items.map(({id, name, character, profile_path}) => {\n        const profileImage = profile_path?.length > 0 ? `https://image.tmdb.org/t/p/w500${profile_path}` : defaultImage;\n        return (\n            <li key={id} className={styles.item}>\n                <img src={profileImage} width=\"150\" alt={name} />\n                <p>{name}</p>\n                <p>Character: {character}</p>\n            </li>\n        )\n    })\n    return (\n        <ul className={styles.list}>\n            {elements}\n        </ul>\n    )\n}\n\nexport default CastList;","import {useState, useEffect} from 'react';\nimport {useParams} from 'react-router-dom';\n\nimport {getCast} from '../../shared/api/api';\n\nimport Loading from '../../shared/components/Loading/Loading';\nimport CastList from '../../modules/CastList/CastList';\n\nconst MovieCastPage = () => {\n    const [state, setState] = useState({\n        items: [],\n        loading: false,\n        error: null,\n    });\n\n    const {movieId} = useParams();\n\n    useEffect(() => {\n        const fetchCast = async() => {\n            setState(prevState => ({\n                ...prevState, \n                loading: true,\n                error: null,\n            }));\n            try {\n                const cast = await getCast(movieId);\n                setState(prevState => {\n                    return {\n                        ...prevState,\n                        items: [...prevState.items, ...cast]\n                    }\n                });\n            } catch (error) {\n                setState(prevState => ({\n                    ...prevState,\n                    error,\n                }));\n            } finally {\n                setState(prevState => {\n                    return {\n                        ...prevState, \n                        loading: false }\n                });\n            }\n        }\n        fetchCast();\n    }, [movieId, setState]) \n\n    const {items, loading, error} = state;\n\n    return(\n        <div>\n            {loading && <Loading />}\n            {error && <p>Error</p>}\n            {items.length > 0 && <CastList items={items} />}\n        </div>\n    )\n}\n\nexport default MovieCastPage;","import axios from 'axios';\n\nconst instance = axios.create({\n    baseURL: \"https://api.themoviedb.org/3\",\n    params: {\n        api_key: \"280dfc47f55a5a95f0363880d2199c9a\",\n    }\n});\n\nexport const getPopularMovies = async(period, page = 1) => {\n    const {data} = await instance.get(`/trending/movie/${period}`, {\n        params: {\n            page,\n        }\n    })\n\n    return data.results;\n}\n\nexport const getMovieById = async(movie_id) => {\n    const {data} = await instance.get(`/movie/${movie_id}`, {})\n    return data;\n}\n\nexport const getReviews = async(movie_id) => {\n    const {data} = await instance.get(`/movie/${movie_id}/reviews`, {})\n    return data.results;\n}\n\nexport const getCast = async(movie_id) => {\n    const {data} = await instance.get(`/movie/${movie_id}/credits`, {})\n    return data.cast;\n}\n\nexport const searchMovies = async(query, page = 1) => {\n    const {data} = await instance.get(`/search/movie`, {\n        params: {\n            query,\n            page,\n        }\n    })\n\n    return data.results;\n}"],"names":["elements","items","map","id","name","character","profile_path","profileImage","length","defaultImage","className","styles","src","width","alt","useState","loading","error","state","setState","movieId","useParams","useEffect","fetchCast","prevState","getCast","cast","Loading","instance","axios","baseURL","params","api_key","getPopularMovies","period","page","get","data","results","getMovieById","movie_id","getReviews","searchMovies","query"],"sourceRoot":""}
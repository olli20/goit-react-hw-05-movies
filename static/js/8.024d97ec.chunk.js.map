{"version":3,"file":"static/js/8.024d97ec.chunk.js","mappings":"uOA+DA,UA1DyB,WACrB,OAA0BA,EAAAA,EAAAA,UAAS,CAC/BC,MAAO,GACPC,SAAS,EACTC,MAAO,OAHX,eAAOC,EAAP,KAAcC,EAAd,KAMOC,GAAWC,EAAAA,EAAAA,MAAXD,SAEPE,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAY,mCAAG,2FACjBJ,GAAS,SAAAK,GAAS,yBACXA,GADW,IAEdR,SAAS,EACTC,MAAO,MAHO,IADD,mBAOMQ,EAAAA,EAAAA,IAAWL,GAPjB,OAOPM,EAPO,OAQbP,GAAS,SAAAK,GACL,OAAO,kBACAA,GADP,IAEIT,MAAM,GAAD,eAAMS,EAAUT,QAAhB,OAA0BW,KAEtC,IAbY,gDAebP,GAAS,SAAAK,GAAS,yBACXA,GADW,IAEdP,MAAK,MAFS,IAfL,yBAoBbE,GAAS,SAAAK,GACL,OAAO,kBACAA,GADP,IAEIR,SAAS,GAChB,IAxBY,4EAAH,qDA2BlBO,GACH,GAAE,CAACH,EAASD,IAEb,IAEMQ,EAFUT,EAATH,MAEgBa,KAAI,SAACC,GACxB,OAAQ,2BACI,oCAAYA,EAAKC,WACjB,uBAAID,EAAKE,YAFJF,EAAKG,GAIrB,IAGL,OACI,4BACI,qCACA,wBAAKL,MAGhB,C,8JC3DKM,E,OAAWC,EAAAA,OAAa,CAC1BC,QAAS,+BACTC,OAAQ,CACJC,QAAS,sCAIJC,EAAgB,mCAAG,sGACPL,EAASM,IAAI,uBAAwB,CAAC,GAD/B,uBACrBb,EADqB,EACrBA,KADqB,kBAIrBA,EAAKc,SAJgB,2CAAH,qDAOhBC,EAAY,mCAAG,WAAMC,GAAN,yFACHT,EAASM,IAAT,iBAAuBG,GAAY,CAAC,GADjC,uBACjBhB,EADiB,EACjBA,KADiB,kBAGjBA,GAHiB,2CAAH,sDAMZD,EAAU,mCAAG,WAAMiB,GAAN,yFACDT,EAASM,IAAT,iBAAuBG,EAAvB,YAA2C,CAAC,GAD3C,uBACfhB,EADe,EACfA,KADe,kBAGfA,EAAKc,SAHU,2CAAH,sDAMVG,EAAO,mCAAG,WAAMD,GAAN,yFACET,EAASM,IAAT,iBAAuBG,EAAvB,YAA2C,CAAC,GAD9C,uBACZhB,EADY,EACZA,KADY,kBAGZA,EAAKkB,MAHO,2CAAH,qD","sources":["pages/MovieReviewsPage/MovieReviewsPage.jsx","shared/api/api.js"],"sourcesContent":["import {useState, useEffect} from 'react';\nimport {useParams} from 'react-router-dom';\n\nimport {getReviews} from '../../shared/api/api';\n\nconst MovieReviewsPage = () => {\n    const [state, setState] = useState({\n        items: [],\n        loading: false,\n        error: null,\n    });\n\n    const {movieId} = useParams();\n\n    useEffect(() => {\n        const fetchReviews = async() => {\n            setState(prevState => ({\n                ...prevState, \n                loading: true,\n                error: null,\n            }));\n            try {\n                const data = await getReviews(movieId);\n                setState(prevState => {\n                    return {\n                        ...prevState,\n                        items: [...prevState.items, ...data]\n                    }\n                });\n            } catch (error) {\n                setState(prevState => ({\n                    ...prevState,\n                    error,\n                }));\n            } finally {\n                setState(prevState => {\n                    return {\n                        ...prevState, \n                        loading: false }\n                });\n            }\n        }\n        fetchReviews();\n    }, [movieId, setState]) \n\n    const {items} = state;\n\n    const elements = items.map((item) => {\n        return (<li key={item.id}>\n                    <p>Author: {item.author}</p>\n                    <p>{item.content}</p>  \n                </li>)\n        }\n    );\n\n    return (\n        <div>\n            <h3>Reviews</h3>\n            <ol>{elements}</ol>\n        </div>\n    )\n}\n\nexport default MovieReviewsPage;","import axios from 'axios';\n\nconst instance = axios.create({\n    baseURL: \"https://api.themoviedb.org/3\",\n    params: {\n        api_key: \"280dfc47f55a5a95f0363880d2199c9a\",\n    }\n});\n\nexport const getPopularMovies = async() => {\n    const {data} = await instance.get(\"/trending/movie/week\", {\n    })\n\n    return data.results;\n}\n\nexport const getMovieById = async(movie_id) => {\n    const {data} = await instance.get(`/movie/${movie_id}`, {})\n\n    return data;\n}\n\nexport const getReviews = async(movie_id) => {\n    const {data} = await instance.get(`/movie/${movie_id}/reviews`, {})\n\n    return data.results;\n}\n\nexport const getCast = async(movie_id) => {\n    const {data} = await instance.get(`/movie/${movie_id}/credits`, {})\n\n    return data.cast;\n}"],"names":["useState","items","loading","error","state","setState","movieId","useParams","useEffect","fetchReviews","prevState","getReviews","data","elements","map","item","author","content","id","instance","axios","baseURL","params","api_key","getPopularMovies","get","results","getMovieById","movie_id","getCast","cast"],"sourceRoot":""}
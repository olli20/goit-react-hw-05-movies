{"version":3,"file":"static/js/177.aac09f62.chunk.js","mappings":"6SACA,EAAuB,wBAAvB,EAAyD,2BAAzD,EAA6F,0BAA7F,EAA+H,yBAA/H,EAA+J,wBAA/J,EAA8L,wBAA9L,EAAkO,6B,mBCM5NA,EAAW,SAAC,GAAa,IACrBC,EADoB,EAAXC,MACQC,KAAI,YAA0C,IAAxCC,EAAuC,EAAvCA,GAAIC,EAAmC,EAAnCA,KAAMC,EAA6B,EAA7BA,UAAWC,EAAkB,EAAlBA,aACxCC,GAA2B,OAAZD,QAAY,IAAZA,OAAA,EAAAA,EAAcE,QAAS,EAAvB,yCAA6DF,GAAiBG,EACnG,OACI,gBAAKC,UAAWC,EAAhB,UACI,iBAAKD,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,UACI,gBAAKD,UAAWC,EAAcC,IAAKL,EAAcM,IAAKT,OAE1D,iBAAKM,UAAWC,EAAhB,WACI,cAAGD,UAAWC,EAAd,SAA4BP,KAC5B,cAAGM,UAAWC,EAAd,SAAiCN,WAPXF,EAYzC,IAED,OADAW,QAAQC,IAAI,sBAER,SAACC,EAAA,EAAD,CAAMC,KAAK,SAAX,SACKjB,GAGZ,EAED,IAEAD,EAASmB,aAAe,CACpBjB,MAAO,ICxBX,IAmDA,EAnDsB,WAClB,OAA0BkB,EAAAA,EAAAA,UAAS,CAC/BlB,MAAO,GACPmB,SAAS,EACTC,MAAO,OAHX,eAAOC,EAAP,KAAcC,EAAd,KAMOC,GAAWC,EAAAA,EAAAA,MAAXD,SAEPE,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAS,mCAAG,2FACdJ,GAAS,SAAAK,GAAS,yBACXA,GADW,IAEdR,SAAS,EACTC,MAAO,MAHO,IADJ,mBAOSQ,EAAAA,EAAAA,IAAQL,GAPjB,OAOJM,EAPI,OAQVP,GAAS,SAAAK,GACL,OAAO,kBACAA,GADP,IAEI3B,MAAM,GAAD,eAAM2B,EAAU3B,QAAhB,OAA0B6B,KAEtC,IAbS,gDAeVP,GAAS,SAAAK,GAAS,yBACXA,GADW,IAEdP,MAAK,MAFS,IAfR,yBAoBVE,GAAS,SAAAK,GACL,OAAO,kBACAA,GADP,IAEIR,SAAS,GAChB,IAxBS,4EAAH,qDA2BfO,GACH,GAAE,CAACH,EAASD,IAEb,IAAOtB,EAAyBqB,EAAzBrB,MAAOmB,EAAkBE,EAAlBF,QAASC,EAASC,EAATD,MAEvB,OACI,2BACKD,IAAW,SAACW,EAAA,EAAD,IACXV,IAAS,SAACW,EAAA,EAAD,kCACT/B,EAAMO,OAAS,IAAK,SAAC,EAAD,CAAUP,MAAOA,MAGjD,C,wLC1DKgC,E,QAAWC,EAAAA,OAAa,CAC5BC,QAAS,+BACTC,OAAQ,CACNC,QAAS,sCAIAC,EAAiB,mCAAG,6GAAOC,EAAP,+BAAgB,MAAOC,EAAvB,+BAA8B,EAA9B,SACRP,EAASQ,IAAT,0BAAgCF,GAAU,CAC/DH,OAAQ,CACNI,KAAAA,KAH2B,uBACvBE,EADuB,EACvBA,KADuB,kBAMxBA,EAAKC,SANmB,2CAAH,qDASjBC,EAAY,mCAAG,WAAMC,GAAN,yFACHZ,EAASQ,IAAT,iBAAuBI,GAAY,CAAC,GADjC,uBAClBH,EADkB,EAClBA,KADkB,kBAEnBA,GAFmB,2CAAH,sDAKZI,EAAU,mCAAG,WAAMD,GAAN,yFACDZ,EAASQ,IAAT,iBAAuBI,EAAvB,YAA2C,CAAC,GAD3C,uBAChBH,EADgB,EAChBA,KADgB,kBAEjBA,EAAKC,SAFY,2CAAH,sDAKVd,EAAO,mCAAG,WAAMgB,GAAN,yFACEZ,EAASQ,IAAT,iBAAuBI,EAAvB,YAA2C,CAAC,GAD9C,uBACbH,EADa,EACbA,KADa,kBAEdA,EAAKZ,MAFS,2CAAH,sDAKPiB,EAAY,mCAAG,WAAOC,GAAP,8FAAcR,EAAd,+BAAqB,EAArB,SACHP,EAASQ,IAAT,gBAA8B,CACnDL,OAAQ,CACNY,MAAAA,EACAR,KAAAA,KAJsB,uBAClBE,EADkB,EAClBA,KADkB,kBAQnBA,GARmB,2CAAH,qD,sDChCzB,MAA0B,uBAA1B,EAA2D,uB,SCW3D,EARc,SAAC,GAAgB,IAAfO,EAAc,EAAdA,SACZ,OACI,gBAAKvC,UAAWC,EAAhB,UACI,cAAGD,UAAWC,EAAd,SAA+BsC,KAG1C,C,qECTD,EAAuB,mBAAvB,EAAmD,qB,SC6BnD,EAxBa,SAAC,GAAkC,IAAD,IAAhChC,KAAAA,OAAgC,MAAzB,UAAyB,EAAdgC,EAAc,EAAdA,SAgBvBC,EAfmB,SAACjC,GACtB,IAAIkC,EAAO,GACX,OAAQlC,GACJ,IAAK,UAML,QACIkC,EAAOxC,QAJX,IAAK,SACDwC,EAAI,UAAMxC,EAAN,YAAqBA,GAKjC,OAAOwC,CACV,CAEiBC,CAAiBnC,GACnC,OACI,SAACoC,EAAA,EAAD,WACI,gBAAK3C,UAAWwC,EAAhB,SAA4BD,KAGvC,C","sources":["webpack://react-homework-template/./src/modules/CastList/cast-list.module.scss?5582","modules/CastList/CastList.jsx","pages/MovieCastPage/MovieCastPage.jsx","shared/api/api.js","webpack://react-homework-template/./src/shared/components/Error/error.module.scss?3b72","shared/components/Error/Error.jsx","webpack://react-homework-template/./src/shared/components/Grid/grid.module.scss?5271","shared/components/Grid/Grid.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"item\":\"cast-list_item__Oomen\",\"wrapper\":\"cast-list_wrapper__1stvl\",\"poster\":\"cast-list_poster__VcsZ2\",\"image\":\"cast-list_image__-9lr2\",\"meta\":\"cast-list_meta__D9vHV\",\"name\":\"cast-list_name__KKaaR\",\"character\":\"cast-list_character__3y9rs\"};","import PropTypes from 'prop-types';\r\n\r\nimport Grid from '../../shared/components/Grid';\r\n\r\nimport styles from './cast-list.module.scss';\r\nimport defaultImage from '../../shared/images/default-avatar.png';\r\n\r\nconst CastList = ({items}) => {\r\n    const elements = items.map(({id, name, character, profile_path}) => {\r\n        const profileImage = profile_path?.length > 0 ? `https://image.tmdb.org/t/p/w500${profile_path}` : defaultImage;\r\n        return (\r\n            <div className={styles.item} key={id} >\r\n                <div className={styles.wrapper}>\r\n                    <div className={styles.poster}>\r\n                        <img className={styles.image} src={profileImage} alt={name} />\r\n                    </div>\r\n                    <div className={styles.meta}>\r\n                        <p className={styles.name}>{name}</p>\r\n                        <p className={styles.character}>{character}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    })\r\n    console.log(\"CastList rendered\");\r\n    return (\r\n        <Grid type=\"actors\">\r\n            {elements}\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default CastList;\r\n\r\nCastList.defaultProps = {\r\n    items: [],\r\n}\r\n\r\nCastList.propTypes = {\r\n    items: PropTypes.arrayOf(PropTypes.shape({\r\n        id: PropTypes.oneOfType([\r\n            PropTypes.string,\r\n            PropTypes.number]).isRequired,\r\n        name: PropTypes.string.isRequired,\r\n        character: PropTypes.string.isRequired,\r\n        profile_path: PropTypes.string,\r\n    })).isRequired,\r\n}","import {useState, useEffect} from 'react';\r\nimport {useParams} from 'react-router-dom';\r\n\r\nimport {getCast} from '../../shared/api/api';\r\n\r\nimport Loading from '../../shared/components/Loading';\r\nimport Error from '../../shared/components/Error';\r\nimport CastList from '../../modules/CastList';\r\n\r\n// import styles from './movie-cast-page.modle.scss';\r\n\r\nconst MovieCastPage = () => {\r\n    const [state, setState] = useState({\r\n        items: [],\r\n        loading: false,\r\n        error: null,\r\n    });\r\n\r\n    const {movieId} = useParams();\r\n\r\n    useEffect(() => {\r\n        const fetchCast = async() => {\r\n            setState(prevState => ({\r\n                ...prevState, \r\n                loading: true,\r\n                error: null,\r\n            }));\r\n            try {\r\n                const cast = await getCast(movieId);\r\n                setState(prevState => {\r\n                    return {\r\n                        ...prevState,\r\n                        items: [...prevState.items, ...cast]\r\n                    }\r\n                });\r\n            } catch (error) {\r\n                setState(prevState => ({\r\n                    ...prevState,\r\n                    error,\r\n                }));\r\n            } finally {\r\n                setState(prevState => {\r\n                    return {\r\n                        ...prevState, \r\n                        loading: false }\r\n                });\r\n            }\r\n        }\r\n        fetchCast();\r\n    }, [movieId, setState]) \r\n\r\n    const {items, loading, error} = state;\r\n\r\n    return(\r\n        <div>\r\n            {loading && <Loading />}\r\n            {error && <Error>Some error occurred</Error>}\r\n            {items.length > 0 && <CastList items={items} />}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MovieCastPage;","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n  baseURL: 'https://api.themoviedb.org/3',\r\n  params: {\r\n    api_key: 'fe6ebdaf9b26884ef65376bf9a48ed3e',\r\n  },\r\n});\r\n\r\nexport const getTrendingMovies = async (period = 'day', page = 1) => {\r\n  const { data } = await instance.get(`/trending/movie/${period}`, {\r\n    params: {\r\n      page,\r\n    },\r\n  });\r\n  return data.results;\r\n};\r\n\r\nexport const getMovieById = async movie_id => {\r\n  const { data } = await instance.get(`/movie/${movie_id}`, {});\r\n  return data;\r\n};\r\n\r\nexport const getReviews = async movie_id => {\r\n  const { data } = await instance.get(`/movie/${movie_id}/reviews`, {});\r\n  return data.results;\r\n};\r\n\r\nexport const getCast = async movie_id => {\r\n  const { data } = await instance.get(`/movie/${movie_id}/credits`, {});\r\n  return data.cast;\r\n};\r\n\r\nexport const searchMovies = async (query, page = 1) => {\r\n  const { data } = await instance.get(`/search/movie`, {\r\n    params: {\r\n      query,\r\n      page,\r\n    },\r\n  });\r\n\r\n  return data;\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"error_wrapper__2MlH2\",\"message\":\"error_message__MqNnC\"};","import PropTypes from 'prop-types';\r\n\r\nimport styles from './error.module.scss';\r\n\r\nconst Error = ({children}) => {\r\n    return (\r\n        <div className={styles.wrapper}>\r\n            <p className={styles.message}>{children}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Error;\r\n\r\nError.propTypes = {\r\n    children: PropTypes.string.isRequired,\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"gird\":\"grid_gird__3-zC+\",\"actors\":\"grid_actors__hEzPU\"};","import PropTypes from 'prop-types';\r\n\r\nimport Container from '../Container';\r\n\r\nimport styles from './grid.module.scss';\r\n\r\nconst Grid = ({type = \"default\", children}) => {\r\n    const getGridClassList = (type) => {\r\n        let list = \"\";\r\n        switch (type) {\r\n            case \"default\":\r\n                list = styles.gird;\r\n                break;\r\n            case \"actors\":\r\n                list = `${styles.gird} ${styles.actors}`;\r\n                break;\r\n            default:\r\n                list = styles.gird;\r\n        }\r\n        return list;\r\n    }\r\n\r\n    const classList = getGridClassList(type);\r\n    return (\r\n        <Container>\r\n            <div className={classList}>{children}</div>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Grid;\r\n\r\nGrid.propTypes = {\r\n    children: PropTypes.oneOfType([\r\n        PropTypes.string,\r\n        PropTypes.element,\r\n        PropTypes.node]).isRequired,\r\n}"],"names":["CastList","elements","items","map","id","name","character","profile_path","profileImage","length","defaultImage","className","styles","src","alt","console","log","Grid","type","defaultProps","useState","loading","error","state","setState","movieId","useParams","useEffect","fetchCast","prevState","getCast","cast","Loading","Error","instance","axios","baseURL","params","api_key","getTrendingMovies","period","page","get","data","results","getMovieById","movie_id","getReviews","searchMovies","query","children","classList","list","getGridClassList","Container"],"sourceRoot":""}
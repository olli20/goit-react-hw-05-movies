{"version":3,"file":"static/js/498.694ab156.chunk.js","mappings":"2JAGMA,EAAa,SAAC,GAAa,IACvBC,EADsB,EAAXC,MACMC,KAAI,YAAkB,IAAhBC,EAAe,EAAfA,GAAIC,EAAW,EAAXA,MAC7B,OAAQ,yBACI,SAAC,KAAD,CAAMC,GAAE,0CAAqCF,GAA7C,SAAoDC,KAD/CD,EAGpB,IAED,OACI,wBACKH,GAGZ,EAED,MAEAD,EAAWO,aAAe,CACtBL,MAAO,G,uJCWX,EA7ByB,SAAC,GAAgB,IAAfM,EAAc,EAAdA,SACvB,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KAcA,OACI,kBAAMH,SARW,SAAAI,GACjBA,EAAMC,iBACNL,EAASE,GACTI,QAAQC,IAAI,OAAQL,GACpBC,EAAS,GACZ,EAGG,WACI,kBACIK,KAAK,QACLC,MAAOP,EACPQ,SAhBS,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACnBR,EAASQ,EAAOF,MACnB,EAeWG,YAAY,eACZC,UAAQ,KAEZ,mBAAQC,KAAK,SAAb,sBAGX,E,SC2CD,EA/DyB,WACrB,OAA0Bb,EAAAA,EAAAA,UAAS,CAC/BP,MAAO,GACPqB,KAAM,EACNC,SAAS,EACTC,MAAO,OAJX,eAAOf,EAAP,KAAcC,EAAd,KAOA,GAAwCe,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KAEMC,EAASF,EAAaG,IAAI,WAEhCC,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAW,mCAAG,oGAEZrB,GAAS,SAAAsB,GAAS,yBACXA,GADW,IAEdT,SAAS,GAFK,IAFN,UAMOU,EAAAA,EAAAA,IAAaL,GANpB,OAMNM,EANM,OAOZxB,GAAS,SAAAsB,GAAS,yBACXA,GADW,IAEd/B,MAAOiC,GAFO,IAPN,gDAYZxB,GAAS,SAAAsB,GAAS,yBACXA,GADW,IAEdR,MAAK,MAFS,IAZN,yBAiBZd,GAAS,SAAAsB,GAAS,yBACXA,GADW,IAEdT,SAAS,GAFK,IAjBN,4EAAH,qDAuBdK,GACCG,GAGH,GAAE,CAACH,IAER,IAUO3B,EAASQ,EAATR,MAEP,OACI,iBAAKkC,UAAU,YAAf,WACI,gDACA,SAAC,EAAD,CAAkB5B,SAfT,SAACqB,GACdD,EAAgB,CAACC,OAAAA,GAOpB,KAQO,SAAC7B,EAAA,EAAD,CAAYE,MAAOA,MAG9B,C,sLCpEKmC,E,OAAWC,EAAAA,OAAa,CAC1BC,QAAS,+BACTC,OAAQ,CACJC,QAAS,sCAIJC,EAAgB,mCAAG,sGACPL,EAASP,IAAI,uBAAwB,CAAC,GAD/B,uBACrBK,EADqB,EACrBA,KADqB,kBAIrBA,EAAKQ,SAJgB,2CAAH,qDAOhBC,EAAY,mCAAG,WAAMC,GAAN,yFACHR,EAASP,IAAT,iBAAuBe,GAAY,CAAC,GADjC,uBACjBV,EADiB,EACjBA,KADiB,kBAGjBA,GAHiB,2CAAH,sDAMZW,EAAU,mCAAG,WAAMD,GAAN,yFACDR,EAASP,IAAT,iBAAuBe,EAAvB,YAA2C,CAAC,GAD3C,uBACfV,EADe,EACfA,KADe,kBAGfA,EAAKQ,SAHU,2CAAH,sDAMVI,EAAO,mCAAG,WAAMF,GAAN,yFACER,EAASP,IAAT,iBAAuBe,EAAvB,YAA2C,CAAC,GAD9C,uBACZV,EADY,EACZA,KADY,kBAGZA,EAAKa,MAHO,2CAAH,sDAMPd,EAAY,mCAAG,WAAMe,GAAN,8FAAa1B,EAAb,+BAAoB,EAApB,SACHc,EAASP,IAAT,gBAA8B,CAC/CU,OAAQ,CACJS,MAAAA,EACA1B,KAAAA,KAJgB,uBACjBY,EADiB,EACjBA,KADiB,kBAQjBA,EAAKQ,SARY,2CAAH,qD","sources":["modules/MoviesList/MoviesList.jsx","modules/MoviesSearchForm/MoviesSearchForm.jsx","pages/MoviesSearchPage/MoviesSearchPage.jsx","shared/api/api.js"],"sourcesContent":["import {Link} from 'react-router-dom';\nimport {PropTypes} from 'prop-types';\n\nconst MoviesList = ({items}) => {\n    const elements = items.map(({id, title}) => {\n        return (<li key={id}>\n                    <Link to={`/goit-react-hw-05-movies/movies/${id}`}>{title}</Link>\n                </li>);\n    });\n\n    return (\n        <ul>\n            {elements}\n        </ul>\n    )\n}\n\nexport default MoviesList;\n\nMoviesList.defaultProps = {\n    items: []\n}\n\nMoviesList.propTypes = {\n    items: PropTypes.array.isRequired\n}","import {useState} from 'react';\n\nconst MoviesSearchForm = ({onSubmit}) => {\n    const [state, setState] = useState(\"\");\n \n\n    const handleChange = ({target}) => {\n        setState(target.value);\n    }\n\n    const handleSubmit = event => {\n        event.preventDefault();\n        onSubmit(state);\n        console.log(\"Set \", state);\n        setState(\"\");\n    }\n\n    return(\n        <form onSubmit={handleSubmit}>\n            <input \n                name=\"query\"\n                value={state}\n                onChange={handleChange}\n                placeholder=\"Movie search\"\n                required\n            />\n            <button type=\"submit\">Search</button>\n        </form>\n    )\n}\n\nexport default MoviesSearchForm;","import {useState, useEffect} from 'react';\nimport {useSearchParams} from 'react-router-dom';\n\n\nimport {searchMovies} from '../../shared/api/api';\n\nimport MoviesSearchForm from '../../modules/MoviesSearchForm/MoviesSearchForm';\nimport MoviesList from '../../modules/MoviesList/MoviesList';\n\nconst MoviesSearchPage = () => {\n    const [state, setState] = useState({\n        items: [],\n        page: 1,\n        loading: false,\n        error: null,\n    });\n\n    const [searchParams, setSearchParams] = useSearchParams();\n\n    const search = searchParams.get(\"search\");\n\n    useEffect(() => {\n        const fetchMovies = async() => {\n            try {\n                setState(prevState =>({\n                    ...prevState,\n                    loading: true,\n                }));\n                const data = await searchMovies(search);\n                setState(prevState =>({\n                    ...prevState,\n                    items: data,\n                }));\n            } catch (error) {\n                setState(prevState =>({\n                    ...prevState,\n                    error,\n                }));\n            } finally {\n                setState(prevState =>({\n                    ...prevState,\n                    loading: false,\n                }));\n            }\n        }\n        if(search) {\n            fetchMovies();\n        }\n            \n        }, [search])\n\n    const onSubmit = (search) => {\n        setSearchParams({search});\n        // setState(prevState => {\n        //     return {\n        //         ...prevState,\n        //         search,\n        //     }\n        // });\n    }\n\n    const {items} = state;\n\n    return(\n        <div className=\"container\">\n            <h2>Movies Search Page</h2>\n            <MoviesSearchForm onSubmit={onSubmit} />\n            <MoviesList items={items} />\n        </div>\n    )   \n}\n\nexport default MoviesSearchPage;","import axios from 'axios';\n\nconst instance = axios.create({\n    baseURL: \"https://api.themoviedb.org/3\",\n    params: {\n        api_key: \"280dfc47f55a5a95f0363880d2199c9a\",\n    }\n});\n\nexport const getPopularMovies = async() => {\n    const {data} = await instance.get(\"/trending/movie/week\", {\n    })\n\n    return data.results;\n}\n\nexport const getMovieById = async(movie_id) => {\n    const {data} = await instance.get(`/movie/${movie_id}`, {})\n\n    return data;\n}\n\nexport const getReviews = async(movie_id) => {\n    const {data} = await instance.get(`/movie/${movie_id}/reviews`, {})\n\n    return data.results;\n}\n\nexport const getCast = async(movie_id) => {\n    const {data} = await instance.get(`/movie/${movie_id}/credits`, {})\n\n    return data.cast;\n}\n\nexport const searchMovies = async(query, page = 1) => {\n    const {data} = await instance.get(`/search/movie`, {\n        params: {\n            query,\n            page,\n        }\n    })\n\n    return data.results;\n}"],"names":["MoviesList","elements","items","map","id","title","to","defaultProps","onSubmit","useState","state","setState","event","preventDefault","console","log","name","value","onChange","target","placeholder","required","type","page","loading","error","useSearchParams","searchParams","setSearchParams","search","get","useEffect","fetchMovies","prevState","searchMovies","data","className","instance","axios","baseURL","params","api_key","getPopularMovies","results","getMovieById","movie_id","getReviews","getCast","cast","query"],"sourceRoot":""}